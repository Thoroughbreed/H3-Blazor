@page "/"
@using Wepshop.Classes
@inject HttpClient _http
@inject IJSRuntime _js

<h1>Heil Welt!</h1>
Willkommen auf Das Spielplatz.
<hr/>
Indtast MAC-adr: <input @bind-value="_mac" @bind-value:event="oninput" @onkeyup="Mac"/>
<p>Producenten bag den MAC er:</p>
<table class="table table-striped">
    @if (_macResult != null)
    {
        @foreach (var item in _macResult)
        {
            <tr>
                <td>@item.Company</td>
                <td>@item.Type</td>
                <td>@item.Country</td>
            </tr>
        }
    }
</table>
<hr/>
<input @bind="_city"/>
<button class="btn btn-outline-success" @onclick="Weather">Søg</button>
<p>Vejret for <span>@_city</span> er:</p>
@if (_weatherResult == null)
{
    <p>Wtf?!</p>
}
else
{
    <table class="table table-striped">
        <tr>
            <th>Day: </th>
            <th>@_weatherResult.temperature</th>
            <th>@_weatherResult.description</th>
            <th>@_weatherResult.wind</th>
        </tr>
        @foreach (var fore in _weatherResult.forecast)
        {
            <tr>
                <td>@fore.day</td>
                <td>@fore.temperature</td>
                <td></td>
                <td>@fore.wind</td>
            </tr>
        }
    </table>
}
<hr/>
<input @bind-value="_road" @bind-value:event="oninput" @onkeyup="Adresse"/>
<button class="btn btn-outline-success" @onclick="Adresse">Søg</button>
@if (_adresseResult == null)
{
    <p>Wtf?!</p>
}
else
{
    <table class="table table-striped">
        @if (int.TryParse(_road, out _integer))
        {
            <tr>
                <td>@_adresseResult[0].data.postnrnavn</td>
            </tr>
        }
        else
        {
            @foreach (var item in _adresseResult)
            {
                <tr>
                    <td>@item.tekst</td>
                </tr>
            }
        }
    </table>
}




@code
{
    private int _integer;
    private string _city;
    private string _road;
    private string _mac;
    private List<Mac> _macResult;
    private Weather _weatherResult;
    private List<Adresse> _adresseResult;

    private async Task Mac()
    {
        try
        {
            _macResult = await _http.GetFromJsonAsync<List<Mac>>($"https://www.macvendorlookup.com/api/v2/{_mac}");
        }
        catch (Exception)
        {
        }
    }

    private async Task Weather()
    {
        try
        {
            _weatherResult = await _http.GetFromJsonAsync<Weather>($"https://goweather.herokuapp.com/weather/{_city}");
        }
        catch (Exception)
        {
            _weatherResult = null;
        }
    }

    private async Task Adresse()
    {
        try
        {
            _adresseResult = await _http.GetFromJsonAsync<List<Adresse>>($"https://api.dataforsyningen.dk/autocomplete?q={_road}");
        }
        catch (Exception)
        {
            _adresseResult = null;
        }
    }
}