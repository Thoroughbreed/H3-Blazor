@using Wepshop.Classes
@using System.Timers
@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="main">
        <div class="top-row px-4">
            <a href="cart" class="ml-md-auto @_colour">
                @CartAmount <i class="oi oi-basket"></i>
            </a>
        </div>

        <div class="content px-4">
            <CascadingValue Value="this">
                @Body
            </CascadingValue>
        </div>
        <div id="snackbar" class="@_hideNseek">@_item er tilf√∏jet til kurven :)</div>
    </div>
</div>

@code
{
    public List<CartOrderItems> CartItems { get; set; } = new List<CartOrderItems>();
    public List<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private int CartAmount { get; set; }
    private Timer _timer { get; set; } = new Timer(3000);
    
    // Styling ish fields. 
    // _colour sets the background colour of the basket icon in upper right corner
    // _hideNseek is controlling the class of the toaster DIV and _item is the current item in the toaster
    private string _hideNseek { get; set; } = "";
    private string _item { get; set; } = "Defaulting to default value";
    private string _colour { get; set; } = "btn btn-warning";
    
    public void AddToCart(int id)
    {
        if (CartItems.FirstOrDefault(c => c._ProductID == id) != null)
        {
            CartOrderItems cartItem = CartItems.First(c => c._ProductID == id);
            cartItem._Amount++;
            cartItem._LinePrice = Products.Find(p => p.Id == id).Price * cartItem._Amount;
        }
        else
        {
            CartItems.Add(new CartOrderItems
            {
                _ProductID = id,
                _LinePrice = Products.First(p => p.Id == id).Price,
                _Amount = 1
            });
        }
        CartAmount = CartItems.Sum(a => a._Amount);
        ShopPop(Products.FirstOrDefault(p => p.Id == id)?.Name);
        _colour = "btn btn-success";
    }

    public void AddAmount(int id)
    {
        CartOrderItems cartItem = CartItems.FirstOrDefault(c => c._ProductID == id);
        if (cartItem != null)
        {
            cartItem._Amount++;
            cartItem._LinePrice = Products.Find(p => p.Id == id).Price * cartItem._Amount;
        }
        CartAmount = CartItems.Sum(a => a._Amount);
        _colour = "btn btn-success";
    }

    public void SubAmount(int id)
    {
        CartOrderItems cartItem = CartItems.FirstOrDefault(c => c._ProductID == id);
        if (cartItem != null && cartItem._Amount == 1)
        {
            RemoveAmount(id);
        }
        else
        {
            if (cartItem != null)
            {
                cartItem._Amount--;
                cartItem._LinePrice = Products.Find(p => p.Id == id).Price * cartItem._Amount;
            }
        }
        CartAmount = CartItems.Sum(a => a._Amount);
        if (CartAmount < 1)
        {
            _colour = "btn btn-warning";
        }
    }

    public void RemoveAmount(int id)
    {
        var temp = CartItems.FirstOrDefault(c => c._ProductID == id);
        CartItems.Remove(temp);
        CartAmount = CartItems.Sum(a => a._Amount);
        if (CartAmount < 1)
        {
            _colour = "btn btn-warning";
        }
    }

    public void ClearBasket()
    {
        CartItems.Clear();
        CartAmount = 0;
        _colour = "btn btn-warning";
    }
    
    
    private void ShopPop(string p)
    {
        _item = p;
        _hideNseek = "show";
        _timer.Elapsed += OnTimedEvent;
        _timer.Enabled = true;
    }
    
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        _hideNseek = "I TOLD YOU SO!";
        StateHasChanged();
        _timer.Enabled = false;
    }
}